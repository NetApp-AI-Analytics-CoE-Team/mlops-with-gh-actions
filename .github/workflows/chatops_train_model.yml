name: ChatOps for training AI/ML model
on: [issue_comment]

jobs:
  initiate-model-training:
    runs-on: self-hosted
    outputs: 
      deploy_env: ${{ steps.output_deploy_env.outputs.deploy_env }}
      commit_sha: ${{ steps.output_sha.outputs.sha }}
      kubeflow_url: ${{ steps.output_kubeflow_url.outputs.kubeflow_url }}
      run_id: ${{ steps.output_run_id.outputs.run_id }}
    steps:
      # using below actions
      # https://github.com/marketplace/actions/chatops-for-pull-requests
      - name: listen for PR Comments (train)
        id: prcomm_train
        uses: machine-learning-apps/actions-chatops@master
        with:
          APP_PEM: ${{ secrets.APP_PEM }}
          APP_ID: ${{ secrets.APP_ID }}
          TRIGGER_PHRASE: "/train-model"
          INDICATOR_LABEL: "chatops-model-training"
        env: # you must supply GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # output variables for following jobs
      - id: output_deploy_env
        run: echo "deploy_env=${{ steps.prcomm_train.outputs.TRAILING_TOKEN }}" >> $GITHUB_OUTPUT
      - id: output_sha
        # run: echo "::set-output name=sha::${{ steps.prcomm_train.outputs.SHA }}"
        run: echo "sha=${{ steps.prcomm_train.outputs.SHA }}" >> $GITHUB_OUTPUT
      # This step clones the branch of the PR associated with the triggering phrase, but only if it is triggered.
      - name: clone branch of PR
        if: steps.prcomm_train.outputs.BOOL_TRIGGERED == 'true'
        uses: actions/checkout@master
        with:
          ref: ${{ steps.prcomm_train.outputs.SHA }}
      # expects pipeline function is declared in "./pipline.py"
      - name: build pipeline
        if: steps.prcomm_train.outputs.BOOL_TRIGGERED == 'true'
        run: python3 ./pipeline.py ./pipeline.yaml
      # expects pipeline package is located in "./pipline.yaml"
      - name: deploy and run pipeline
        id: train_launcher
        if: steps.prcomm_train.outputs.BOOL_TRIGGERED == 'true'
        run: |
          python3 ./github_actions/deploy_pipeline.py --cloud-environment=${{ steps.prcomm_train.outputs.TRAILING_TOKEN}} --pipeline-package-path=pipeline.yaml --pipeline-version=${{ steps.prcomm_train.outputs.SHA }} --output-file=tmp_run_id.txt
      - id: output_run_id
        run: echo "run_id=`cat tmp_run_id.txt`" >> $GITHUB_OUTPUT
      - id: output_kubeflow_url
        run: echo "kubeflow_url=`python3 ./github_actions/client.py ${{ steps.prcomm_train.outputs.TRAILING_TOKEN }}`" >> $GITHUB_OUTPUT
  # nortify result of building/uploading/running pipeline as a PR comment
  initiate-model-training-result:
    runs-on: self-hosted
    if: ${{ always() }}
    needs: initiate-model-training
    steps:
      # in case of succeeded
      - name: commenting on PR (success) 
        if: ${{ needs.initiate-model-training.result == 'success' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `# üöÄ Successfully launched the pipeline for SHA: **${{ needs.initiate-model-training.outputs.commit_sha }}**
                
                RUN ID: \\\`\\\`\\\`${{ needs.initiate-model-training.outputs.run_id }}\\\`\\\`\\\`
                I will nortify when the RUN is completed, or you can check detailed status on the [Kubeflow UI](${{ needs.initiate-model-training.kubeflow_ui }}).`
            })
      # in case of failed
      - name: commenting on PR (failure) 
        if: ${{ needs.initiate-model-training.result == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `# ‚ùå Failed to launch the pipeline for SHA: **${{ needs.initiate-model-training.outputs.commit_sha }}**

                Check Actions tab and [Kubeflow UI](${{ needs.initiate-model-training.kubeflow_ui }}) to find the error cause.`
            })
  # wait for completion of pipline RUN that is initiated previous job
  # default timeout is 5 hours
  wait-for-run-completion:
    runs-on: self-hosted
    needs: 
      - initiate-model-training
      - initiate-model-training-result
    outputs: 
      model_uri: ${{ steps.output_run_status.outputs.run_status }}
      run_status: ${{ steps.output_model_uri.outputs.model_uri }}
    steps:
      - name: clone branch of PR
        uses: actions/checkout@master
        with:
          ref: ${{ needs.initiate-model-training.outputs.commit_sha }}
      - name: wait for pipeline run
        id: run_waiter
        run: | 
          python3 ./github_actions/wait_run_completion.py --cloud-environment=${{ needs.initiate-model-training.outputs.deploy_env }} --run-id=${{ needs.initiate-model-training.outputs.run_id }} --output-file=tmp_run_status.txt
      - id: output_run_status
        run: echo "run_status=`cat tmp_run_status.txt`" >> $GITHUB_OUTPUT
  # nortify result of pipeline RUN as a PR comment
  # also in case of "succeeded", get artifact uri that is uploaded into the artifact repository
  wait-for-run-completion-result:
    runs-on: self-hosted
    # if: ${{ always() }}
    needs:
      - initiate-model-training
      - wait-for-run-completion
    steps:
      # in case of run succeedes
      - name: read artifact of run
        if: needs.wait-for-run-completion.outputs.run_status == 'Succeeded'
        run: |
          python3 ./github_actions/read_pipeline_output.py --cloud-environment=${{ needs.initiate-model-training.outputs.deploy_env }} --run-id=${{ needs.initiate-model-training.outputs.run_id }} --component-name=upload-savedmodel --artifact-name=upload-savedmodel-Output --output-file=tmp_model_uri.txt
      # gets artifact uri and stores it as repository env to deploy model
      - id: output_model_uri
        if: needs.wait-for-run-completion.outputs.run_status == 'Succeeded'
        run: echo "model_uri=`cat tmp_model_uri.txt`" >> $GITHUB_OUTPUT
      - name: commenting on PR (Succeeded) 
        if: needs.wait-for-run-completion.outputs.run_status == 'Succeeded'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `# ‚úÖ RUN ID: **${{ needs.initiate-model-training.outputs.run_id }}** has been successfully completed
                
                Artifact of RUN is uploaded into your artifact repository.
                URI: ${{ steps.output_run_status.outputs.run_status }}`
            })
      - name: applying label (Succeeded)
        if: needs.wait-for-run-completion.outputs.run_status == 'Succeeded'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["model-is-ready"]
            })
      # in case of run failed
      - name: commenting on PR (Failed) 
        if: needs.wait-for-run-completion.outputs.run_status == 'Failed'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `# ‚ùå RUN ID: **${{ needs.initiate-model-training.outputs.run_id }}** has been completed with failure status

                Access to the [Kubeflow UI](${{ needs.initiate-model-training.kubeflow_ui }}) and check details of RUN to find error cause.`
            })
      - name: applying label (Failed)
        if: needs.wait-for-run-completion.outputs.run_status == 'Failed'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["training-run-failed"]
            })
      # in case of run timeouted
      - name: commenting on PR (timeout) 
        if: needs.wait-for-run-completion.outputs.run_status == 'TimeoutError'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `# üïõ RUN ID: **${{ needs.initiate-model-training.outputs.run_id }}** has exceeded timeout and NOT been completed yet
                
                Access to the [Kubeflow UI](${{ needs.initiate-model-training.kubeflow_ui }}) and check the latest status of RUN.`
            })
      - name: applying label (timeout)
        if: steps.run_waiter.outputs.run_status == 'TimeoutError'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["training-run-unknown-status"]
            })