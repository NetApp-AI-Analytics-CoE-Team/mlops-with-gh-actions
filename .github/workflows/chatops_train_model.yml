name: ChatOps for training AI/ML model
on: [issue_comment]

jobs:
  train-model:
    runs-on: self-hosted
    outputs: 
      deploy_env: ${{ steps.output_deploy_env.outputs.deploy_env }}
      commit_sha: ${{ steps.output_sha.outputs.sha }}
      run_id: ${{ steps.train_launcher.outputs.run_id }}
    steps:
      - name: listen for PR Comments (train)
        id: prcomm_train
        uses: machine-learning-apps/actions-chatops@master
        with:
          APP_PEM: ${{ secrets.APP_PEM }}
          APP_ID: ${{ secrets.APP_ID }}
          TRIGGER_PHRASE: "/train-model"
          INDICATOR_LABEL: "model-training-triggered"
        env: # you must supply GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # output variables for following jobs
      - id: output_deploy_env
        run: echo "deploy_env=${{ steps.prcomm_train.outputs.TRAILING_TOKEN }}" >> $GITHUB_OUTPUT
      - id: output_sha
        # run: echo "::set-output name=sha::${{ steps.prcomm_train.outputs.SHA }}"
        run: echo "sha=${{ steps.prcomm_train.outputs.SHA }}" >> $GITHUB_OUTPUT
      # This step clones the branch of the PR associated with the triggering phrase, but only if it is triggered.
      - name: clone branch of PR
        if: steps.prcomm_train.outputs.BOOL_TRIGGERED == 'true'
        uses: actions/checkout@master
        with:
          ref: ${{ steps.prcomm_train.outputs.SHA }}
      # expects pipeline function is declared in "./pipline.py"
      - name: build pipeline
        if: steps.prcomm_train.outputs.BOOL_TRIGGERED == 'true'
        run: python3 ./pipeline.py ./pipeline.yaml
      # expects pipeline package is located in "./pipline.yaml"
      - name: deploy and run pipeline
        id: train_launcher
        if: steps.prcomm_train.outputs.BOOL_TRIGGERED == 'true'
        run: |
          export RUN_ID=`python3 ./github_actions/deploy_pipeline.py --cloud-environment=${{ steps.prcomm_train.outputs.TRAILING_TOKEN}} --pipeline-package-path=pipeline.yaml --pipeline-version=${{ steps.prcomm_train.outputs.SHA }}`
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        # continue-on-error: true
  train-model-messenger:
    runs-on: self-hosted
    if: ${{ always() }}
    needs: train-model
    steps:
      # success message
      - name: commenting on PR (success) 
        if: ${{ needs.train-model.result == 'success' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
                # 🚀Successfully launched the pipeline for SHA:```${{ needs.train-model.outputs.commit_sha }}```
                Check the status of RUN ID: on your Kubeflow UI.`
            })
      - name: applying label
        if: ${{ needs.train-model.result == 'success' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["model-training-initiated"]
            })
      # error message
      - name: commenting on PR (failure) 
        if: ${{ needs.train-model.result == 'failure' }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
                # ❌Failed to launch the pipeline for SHA
                Check Actions tab to find the error cause.`
            })
  wait-run-completion:
    runs-on: self-hosted
    needs: train-model
    outputs: 
      model_uri: 
      run_status:
    steps:
      - name: clone branch of PR
        uses: actions/checkout@master
        with:
          ref: ${{ needs.train-model.outputs.commit_sha }}
      - name: wait for pipeline run
        id: run_waiter
        run: | 
          export RUN_STATUS=`python3 ./github_actions/wait_run_completion.py --cloud-environment=${{ needs.train-model.outputs.deploy_env }} --run-id=${{ needs.train-model.outputs.run_id }}`
          echo "run_status=$RUN_STATUS" >> $GITHUB_OUTPUT
      - name: read artifact of run
        if: steps.run_waiter.outputs.run_status == 'Succeeded'
        run: |
          export MODEL_URI=`python3 ./github_actions/read_pipeline_output.py --cloud-environment=${{ needs.train-model.outputs.deploy_env }} --run-id=${{ needs.train-model.outputs.run_id }} --component-name=upload-savedmodel --artifact-name=upload-savedmodel-Output`
          echo "model_uri=$MODEL_URI" >> $GITHUB_OUTPUT
      - name: commenting on PR (Succeeded) 
        if: steps.run_waiter.outputs.run_status == 'Succeeded'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
                # Run: has been successfully completed
                Artifact of run is uploaded into artifact repository`
            })
      - name: commenting on PR (Failed) 
        if: steps.run_waiter.outputs.run_status == 'Failed'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
                # Run: has been completed with failure
                Access to the Kubeflow UI and check details of run`
            })
      - name: commenting on PR (timeout) 
        if: steps.run_waiter.outputs.run_status == 'TimeoutError'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
                # Run: has exceeded timeout and NOT been completed yet
                Access to the Kubeflow UI and check status of RUN yourself`
            })